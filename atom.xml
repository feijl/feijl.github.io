<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>伊月无名</title>
  <subtitle>居安思危</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://feijl.cn/"/>
  <updated>2016-08-04T11:35:02.884Z</updated>
  <id>http://feijl.cn/</id>
  
  <author>
    <name>feijl</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>dubbo注解配置</title>
    <link href="http://feijl.cn/2016/03/28/dubbo%E6%B3%A8%E8%A7%A3%E9%85%8D%E7%BD%AE/"/>
    <id>http://feijl.cn/2016/03/28/dubbo注解配置/</id>
    <published>2016-03-28T04:01:00.000Z</published>
    <updated>2016-08-04T11:35:02.884Z</updated>
    
    <content type="html"><![CDATA[<h3 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h3><p>使用Service注解，注意引入的是com.alibaba.dubbo.config.annotation包下的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span>(version=<span class="string">"1.0.0"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServiceImpl</span> <span class="keyword">implements</span> <span class="title">LoginService</span> </span>&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>配置文件中开启注解扫描<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 扫描注解包路径，多个包用逗号分隔，不填pacakge表示扫描当前ApplicationContext中所有的类 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dubbo:annotation</span> <span class="attr">package</span>=<span class="string">"com.feijl.provider"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h3><p>使用Reference注解引用，其它照旧spring方式，比如spring中的Service</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebLoginService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Reference</span>(version = <span class="string">"1.0.0"</span>)</div><div class="line">    <span class="keyword">private</span> LoginService loginService;</div><div class="line">    </div><div class="line">    ...</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>配置文件中开启注解扫描<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 扫描注解包路径，多个包用逗号分隔，不填pacakge表示扫描当前ApplicationContext中所有的类 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dubbo:annotation</span> <span class="attr">package</span>=<span class="string">"com.feijl.consumer"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;服务提供者&quot;&gt;&lt;a href=&quot;#服务提供者&quot; class=&quot;headerlink&quot; title=&quot;服务提供者&quot;&gt;&lt;/a&gt;服务提供者&lt;/h3&gt;&lt;p&gt;使用Service注解，注意引入的是com.alibaba.dubbo.config.annotation包下的&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Service&lt;/span&gt;(version=&lt;span class=&quot;string&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LoginServiceImpl&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LoginService&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="dubbo" scheme="http://feijl.cn/categories/dubbo/"/>
    
    
  </entry>
  
  <entry>
    <title>json和jsonp</title>
    <link href="http://feijl.cn/2016/03/28/json%E5%92%8Cjsonp/"/>
    <id>http://feijl.cn/2016/03/28/json和jsonp/</id>
    <published>2016-03-28T04:00:00.000Z</published>
    <updated>2016-08-04T11:35:02.885Z</updated>
    
    <content type="html"><![CDATA[<p>本文转载自：(<a href="http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html" target="_blank" rel="external">http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html</a>)</p>
<p>前言：</p>
<p>说到AJAX就会不可避免的面临两个问题，第一个是AJAX以何种格式来交换数据？第二个是跨域的需求如何解决？这两个问题目前都有不同的解决方案，比如数据可以用自定义字符串或者用XML来描述，跨域可以通过服务器端代理来解决。</p>
<p>但到目前为止最被推崇或者说首选的方案还是用JSON来传数据，靠JSONP来跨域。而这就是本文将要讲述的内容。</p>
<a id="more"></a>
<p>JSON和JSONP虽然只有一个字母的差别，但其实他们根本不是一回事儿：JSON是一种数据交换格式，而JSONP是一种依靠开发人员的聪明才智创造出的一种非官方跨域数据交互协议。我们拿最近比较火的谍战片来打个比方，JSON是地下党们用来书写和交换情报的“暗号”，而JSONP则是把用暗号书写的情报传递给自己同志时使用的接头方式。看到没？一个是描述信息的格式，一个是信息传递双方约定的方法。</p>
<p>既然随便聊聊，那我们就不再采用教条的方式来讲述，而是把关注重心放在帮助开发人员理解是否应当选择使用以及如何使用上。</p>
<p> 什么是JSON？</p>
<p>前面简单说了一下，JSON是一种基于文本的数据交换方式，或者叫做数据描述格式，你是否该选用他首先肯定要关注它所拥有的优点。</p>
<p>JSON的优点：</p>
<p>1、基于纯文本，跨平台传递极其简单；</p>
<p>2、Javascript原生支持，后台语言几乎全部支持；</p>
<p>3、轻量级数据格式，占用字符数量极少，特别适合互联网传递；</p>
<p>4、可读性较强，虽然比不上XML那么一目了然，但在合理的依次缩进之后还是很容易识别的；</p>
<p>5、容易编写和解析，当然前提是你要知道数据结构；</p>
<p>JSON的缺点当然也有，但在作者看来实在是无关紧要的东西，所以不再单独说明。</p>
<p>JSON的格式或者叫规则：</p>
<p>JSON能够以非常简单的方式来描述数据结构，XML能做的它都能做，因此在跨平台方面两者完全不分伯仲。</p>
<p>1、JSON只有两种数据类型描述符，大括号{}和方括号[]，其余英文冒号:是映射符，英文逗号,是分隔符，英文双引号””是定义符。</p>
<p>2、大括号{}用来描述一组“不同类型的无序键值对集合”（每个键值对可以理解为OOP的属性描述），方括号[]用来描述一组“相同类型的有序数据集合”（可对应OOP的数组）。</p>
<p>3、上述两种集合中若有多个子项，则通过英文逗号,进行分隔。</p>
<p>4、键值对以英文冒号:进行分隔，并且建议键名都加上英文双引号””，以便于不同语言的解析。</p>
<p>5、JSON内部常用数据类型无非就是字符串、数字、布尔、日期、null 这么几个，字符串必须用双引号引起来，其余的都不用，日期类型比较特殊，这里就不展开讲述了，只是建议如果客户端没有按日期排序功能需求的话，那么把日期时间直接作为字符串传递就好，可以省去很多麻烦。</p>
<p>JSON实例：</p>
<p>复制代码<br>// 描述一个人</p>
<p>var person = {<br>    “Name”: “Bob”,<br>    “Age”: 32,<br>    “Company”: “IBM”,<br>    “Engineer”: true<br>}</p>
<p>// 获取这个人的信息</p>
<p>var personAge = person.Age;</p>
<p>// 描述几个人</p>
<p>var members = [<br>    {<br>        “Name”: “Bob”,<br>        “Age”: 32,<br>        “Company”: “IBM”,<br>        “Engineer”: true<br>    },<br>    {<br>        “Name”: “John”,<br>        “Age”: 20,<br>        “Company”: “Oracle”,<br>        “Engineer”: false<br>    },<br>    {<br>        “Name”: “Henry”,<br>        “Age”: 45,<br>        “Company”: “Microsoft”,<br>        “Engineer”: false<br>    }<br>]</p>
<p>// 读取其中John的公司名称</p>
<p>var johnsCompany = members[1].Company;</p>
<p>// 描述一次会议</p>
<p>var conference = {<br>    “Conference”: “Future Marketing”,<br>    “Date”: “2012-6-1”,<br>    “Address”: “Beijing”,<br>    “Members”:<br>    [<br>        {<br>            “Name”: “Bob”,<br>            “Age”: 32,<br>            “Company”: “IBM”,<br>            “Engineer”: true<br>        },<br>        {<br>            “Name”: “John”,<br>            “Age”: 20,<br>            “Company”: “Oracle”,<br>            “Engineer”: false<br>        },<br>        {<br>            “Name”: “Henry”,<br>            “Age”: 45,<br>            “Company”: “Microsoft”,<br>            “Engineer”: false<br>        }<br>    ]<br>}</p>
<p>// 读取参会者Henry是否工程师</p>
<p>var henryIsAnEngineer = conference.Members[2].Engineer;<br>复制代码</p>
<p>关于JSON，就说这么多，更多细节请在开发过程中查阅资料深入学习。</p>
<p> 什么是JSONP？</p>
<p>先说说JSONP是怎么产生的：</p>
<p>其实网上关于JSONP的讲解有很多，但却千篇一律，而且云里雾里，对于很多刚接触的人来讲理解起来有些困难，小可不才，试着用自己的方式来阐释一下这个问题，看看是否有帮助。</p>
<p>1、一个众所周知的问题，Ajax直接请求普通文件存在跨域无权限访问的问题，甭管你是静态页面、动态网页、web服务、WCF，只要是跨域请求，一律不准；</p>
<p>2、不过我们又发现，Web页面上调用js文件时则不受是否跨域的影响（不仅如此，我们还发现凡是拥有”src”这个属性的标签都拥有跨域的能力，比如<script>、<img>、<iframe>）；</p>
<p>3、于是可以判断，当前阶段如果想通过纯web端（ActiveX控件、服务端代理、属于未来的HTML5之Websocket等方式不算）跨域访问数据就只有一种可能，那就是在远程服务器上设法把数据装进js格式的文件里，供客户端调用和进一步处理；</p>
<p>4、恰巧我们已经知道有一种叫做JSON的纯字符数据格式可以简洁的描述复杂数据，更妙的是JSON还被js原生支持，所以在客户端几乎可以随心所欲的处理这种格式的数据；</p>
<p>5、这样子解决方案就呼之欲出了，web客户端通过与调用脚本一模一样的方式，来调用跨域服务器上动态生成的js格式文件（一般以JSON为后缀），显而易见，服务器之所以要动态生成JSON文件，目的就在于把客户端需要的数据装入进去。</p>
<p>6、客户端在对JSON文件调用成功之后，也就获得了自己所需的数据，剩下的就是按照自己需求进行处理和展现了，这种获取远程数据的方式看起来非常像AJAX，但其实并不一样。</p>
<p>7、为了便于客户端使用数据，逐渐形成了一种非正式传输协议，人们把它称作JSONP，该协议的一个要点就是允许用户传递一个callback参数给服务端，然后服务端返回数据时会将这个callback参数作为函数名来包裹住JSON数据，这样客户端就可以随意定制自己的函数来自动处理返回数据了。</p>
<p>如果对于callback参数如何使用还有些模糊的话，我们后面会有具体的实例来讲解。</p>
<p>JSONP的客户端具体实现：</p>
<p>不管jQuery也好，extjs也罢，又或者是其他支持jsonp的框架，他们幕后所做的工作都是一样的，下面我来循序渐进的说明一下jsonp在客户端的实现：</p>
<p>1、我们知道，哪怕跨域js文件中的代码（当然指符合web脚本安全策略的），web页面也是可以无条件执行的。</p>
<p>远程服务器remoteserver.com根目录下有个remote.js文件代码如下：</p>
<p>alert(‘我是远程文件’);<br>本地服务器localserver.com下有个jsonp.html页面代码如下：</p>
<p>复制代码<br>&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Transitional//EN” “<a href="http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;">http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;</a></p>
<p><html xmlns="http://www.w3.org/1999/xhtml"></p>
<p><head><br>    <title></title><br>    <script type="text/javascript" src="http://remoteserver.com/remote.js"></script><br></p>
<body>

<p></p></body><br><br>复制代码<br>毫无疑问，页面将会弹出一个提示窗体，显示跨域调用成功。<p></p>
<p>2、现在我们在jsonp.html页面定义一个函数，然后在远程remote.js中传入数据进行调用。</p>
<p>jsonp.html页面代码如下：</p>
<p>复制代码<br>&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Transitional//EN” “<a href="http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;" target="_blank" rel="external">http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;</a></p>
<p><html xmlns="http://www.w3.org/1999/xhtml"></html></p>
<p><head><br>    <title></title><br>    <script type="text/javascript"><br>    var localHandler = function(data){<br>        alert(‘我是本地函数，可以被跨域的remote.js文件调用，远程js带来的数据是：’ + data.result);<br>    };<br>    </script><br>    <script type="text/javascript" src="http://remoteserver.com/remote.js"></script><br></head></p>
<body>

<p></p></body><br><br>复制代码<br>remote.js文件代码如下：<p></p>
<p>localHandler({“result”:”我是远程js带来的数据”});<br>运行之后查看结果，页面成功弹出提示窗口，显示本地函数被跨域的远程js调用成功，并且还接收到了远程js带来的数据。很欣喜，跨域远程获取数据的目的基本实现了，但是又一个问题出现了，我怎么让远程js知道它应该调用的本地函数叫什么名字呢？毕竟是jsonp的服务者都要面对很多服务对象，而这些服务对象各自的本地函数都不相同啊？我们接着往下看。</p>
<p>3、聪明的开发者很容易想到，只要服务端提供的js脚本是动态生成的就行了呗，这样调用者可以传一个参数过去告诉服务端“我想要一段调用XXX函数的js代码，请你返回给我”，于是服务器就可以按照客户端的需求来生成js脚本并响应了。</p>
<p>看jsonp.html页面的代码：</p>
<p>复制代码<br>&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Transitional//EN” “<a href="http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;" target="_blank" rel="external">http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;</a></p>
<p><html xmlns="http://www.w3.org/1999/xhtml"></html></p>
<p><head><br>    <title></title><br>    <script type="text/javascript"><br>    // 得到航班信息查询结果后的回调函数<br>    var flightHandler = function(data){<br>        alert(‘你查询的航班结果是：票价 ‘ + data.price + ‘ 元，’ + ‘余票 ‘ + data.tickets + ‘ 张。’);<br>    };<br>    // 提供jsonp服务的url地址（不管是什么类型的地址，最终生成的返回值都是一段javascript代码）<br>    var url = “<a href="http://flightQuery.com/jsonp/flightResult.aspx?code=CA1998&amp;callback=flightHandler">http://flightQuery.com/jsonp/flightResult.aspx?code=CA1998&amp;callback=flightHandler</a>“;<br>    // 创建script标签，设置其属性<br>    var script = document.createElement(‘script’);<br>    script.setAttribute(‘src’, url);<br>    // 把script标签加入head，此时调用开始<br>    document.getElementsByTagName(‘head’)[0].appendChild(script);<br>    </script><br></head></p>
<body>

<p></p></body><br><br>复制代码<br>这次的代码变化比较大，不再直接把远程js文件写死，而是编码实现动态查询，而这也正是jsonp客户端实现的核心部分，本例中的重点也就在于如何完成jsonp调用的全过程。<p></p>
<p>我们看到调用的url中传递了一个code参数，告诉服务器我要查的是CA1998次航班的信息，而callback参数则告诉服务器，我的本地回调函数叫做flightHandler，所以请把查询结果传入这个函数中进行调用。</p>
<p>OK，服务器很聪明，这个叫做flightResult.aspx的页面生成了一段这样的代码提供给jsonp.html（服务端的实现这里就不演示了，与你选用的语言无关，说到底就是拼接字符串）：</p>
<p>flightHandler({<br>    “code”: “CA1998”,<br>    “price”: 1780,<br>    “tickets”: 5<br>});<br>我们看到，传递给flightHandler函数的是一个json，它描述了航班的基本信息。运行一下页面，成功弹出提示窗口，jsonp的执行全过程顺利完成！</p>
<p>4、到这里为止的话，相信你已经能够理解jsonp的客户端实现原理了吧？剩下的就是如何把代码封装一下，以便于与用户界面交互，从而实现多次和重复调用。</p>
<p>什么？你用的是jQuery，想知道jQuery如何实现jsonp调用？好吧，那我就好人做到底，再给你一段jQuery使用jsonp的代码（我们依然沿用上面那个航班信息查询的例子，假定返回jsonp结果不变）：</p>
<p>复制代码<br>&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Transitional//EN” “<a href="http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;" target="_blank" rel="external">http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;</a><br> <html xmlns="http://www.w3.org/1999/xhtml"><br> <head><br>     <title>Untitled Page</title><br>      &lt;script type=”text/javascript” src=jquery.min.js”&gt;<br>      <script type="text/javascript"><br>     jQuery(document).ready(function(){<br>        $.ajax({<br>             type: “get”,<br>             async: false,<br>             url: “<a href="http://flightQuery.com/jsonp/flightResult.aspx?code=CA1998">http://flightQuery.com/jsonp/flightResult.aspx?code=CA1998</a>“,<br>             dataType: “jsonp”,<br>             jsonp: “callback”,//传递给请求处理程序或页面的，用以获得jsonp回调函数名的参数名(一般默认为:callback)<br>             jsonpCallback:”flightHandler”,//自定义的jsonp回调函数名称，默认为jQuery自动生成的随机函数名，也可以写”?”，jQuery会自动为你处理数据<br>             success: function(json){<br>                 alert(‘您查询到航班信息：票价： ‘ + json.price + ‘ 元，余票： ‘ + json.tickets + ‘ 张。’);<br>             },<br>             error: function(){<br>                 alert(‘fail’);<br>             }<br>         });<br>     });<br>     </script><br>     </head><br>  <body><br>  </body><br> </html><br>复制代码<br>是不是有点奇怪？为什么我这次没有写flightHandler这个函数呢？而且竟然也运行成功了！哈哈，这就是jQuery的功劳了，jquery在处理jsonp类型的ajax时（还是忍不住吐槽，虽然jquery也把jsonp归入了ajax，但其实它们真的不是一回事儿），自动帮你生成回调函数并把数据取出来供success属性方法来调用，是不是很爽呀？</p>
<p>好啦，写到这里，我已经无力再写下去，又困又累，得赶紧睡觉。朋友们要是看这不错，觉得有启发，给点个“推荐”呗！由于实在比较简单，所以就不再提供demo源码下载了。</p>
<p> 4月20日下午的补充：</p>
<p>没想到上了博客园的头条推荐。看到大家对这篇文章的认可和评论，还是很开心的，这里针对ajax与jsonp的异同再做一些补充说明：</p>
<p>1、ajax和jsonp这两种技术在调用方式上“看起来”很像，目的也一样，都是请求一个url，然后把服务器返回的数据进行处理，因此jquery和ext等框架都把jsonp作为ajax的一种形式进行了封装；</p>
<p>2、但ajax和jsonp其实本质上是不同的东西。ajax的核心是通过XmlHttpRequest获取非本页内容，而jsonp的核心则是动态添加<script>标签来调用服务器提供的js脚本。</p>
<p>3、所以说，其实ajax与jsonp的区别不在于是否跨域，ajax通过服务端代理一样可以实现跨域，jsonp本身也不排斥同域的数据的获取。</p>
<p>4、还有就是，jsonp是一种方式或者说非强制性协议，如同ajax一样，它也不一定非要用json格式来传递数据，如果你愿意，字符串都行，只不过这样不利于用jsonp提供公开服务。</p>
<p>总而言之，jsonp不是ajax的一个特例，哪怕jquery等巨头把jsonp封装进了ajax，也不能改变着一点！</p>
<p>注意：此文章属博主原创，转载请注明作者信息和原始链接，谢谢合作。</p>
</script></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文转载自：(&lt;a href=&quot;http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html&quot;&gt;http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;前言：&lt;/p&gt;
&lt;p&gt;说到AJAX就会不可避免的面临两个问题，第一个是AJAX以何种格式来交换数据？第二个是跨域的需求如何解决？这两个问题目前都有不同的解决方案，比如数据可以用自定义字符串或者用XML来描述，跨域可以通过服务器端代理来解决。&lt;/p&gt;
&lt;p&gt;但到目前为止最被推崇或者说首选的方案还是用JSON来传数据，靠JSONP来跨域。而这就是本文将要讲述的内容。&lt;/p&gt;
    
    </summary>
    
      <category term="json" scheme="http://feijl.cn/categories/json/"/>
    
    
  </entry>
  
  <entry>
    <title>dubbo服务提供者官方启动方式</title>
    <link href="http://feijl.cn/2016/03/28/dubbo%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E8%80%85%E5%AE%98%E6%96%B9%E5%90%AF%E5%8A%A8%E6%96%B9%E5%BC%8F/"/>
    <id>http://feijl.cn/2016/03/28/dubbo服务提供者官方启动方式/</id>
    <published>2016-03-28T04:00:00.000Z</published>
    <updated>2016-08-04T11:35:02.884Z</updated>
    
    <content type="html"><![CDATA[<p>公司之前的dubbo项目为了省事，服务提供者直接由web容器启动，虽然dubbo项目理论上也只是需要加载其配置文件即可启动，但依赖容器运行会启动多余的web服务造成资源浪费，查看官方例子中有使用单独启动方式，逐按照dubbo-demo-provider的例子进行配置。</p>
<a id="more"></a>
<p>首先在pom文件中加入插件</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>unpack<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>unpack<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">artifactItems</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">artifactItem</span>&gt;</span></div><div class="line">                                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.parent.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">                                <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/dubbo<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></div><div class="line">                                <span class="tag">&lt;<span class="name">includes</span>&gt;</span>META-INF/assembly/**<span class="tag">&lt;/<span class="name">includes</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;/<span class="name">artifactItem</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;/<span class="name">artifactItems</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">descriptor</span>&gt;</span>src/main/assembly/assembly.xml<span class="tag">&lt;/<span class="name">descriptor</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></div></pre></td></tr></table></figure>
<p>maven-dependency-plugin插件把dubbo包中的文件（如启动脚本），解压到outputDirectory指定的目录中，然后使用assembly方式打包，assembly文件配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">assembly</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">id</span>&gt;</span>assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">formats</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">format</span>&gt;</span>tar.gz<span class="tag">&lt;/<span class="name">format</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">formats</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">includeBaseDirectory</span>&gt;</span>true<span class="tag">&lt;/<span class="name">includeBaseDirectory</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">fileSets</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;/dubbo/META-INF/assembly/bin<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>bin<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">fileMode</span>&gt;</span>0755<span class="tag">&lt;/<span class="name">fileMode</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/assembly/conf<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>conf<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">fileMode</span>&gt;</span>0644<span class="tag">&lt;/<span class="name">fileMode</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!-- 过滤 --&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">excludes</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">exclude</span>&gt;</span>*.xml<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">fileSets</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dependencySets</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependencySet</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>lib<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span><span class="comment">&lt;!-- 将scope为runtime的依赖包打包到lib目录下。 --&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependencySet</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependencySets</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">assembly</span>&gt;</span></div></pre></td></tr></table></figure>
<p>第一个fileSet把dubbo的启动脚本（bin目录下）输出到当前目录的bin目录下，第二个fileSet把dubbo配置文件输出到conf目录下，dependencySets把依赖的jar包输出到lib目录下。</p>
<p>运行maven打包命令生成.tar.gz压缩文件，之后在服务器上解压该文件，运行bin目录下的start脚本启动即可。</p>
<p>另外本地测试直接运行时，可以调用官方main方法启动</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    com.alibaba.dubbo.container.Main.main(args);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司之前的dubbo项目为了省事，服务提供者直接由web容器启动，虽然dubbo项目理论上也只是需要加载其配置文件即可启动，但依赖容器运行会启动多余的web服务造成资源浪费，查看官方例子中有使用单独启动方式，逐按照dubbo-demo-provider的例子进行配置。&lt;/p&gt;
    
    </summary>
    
      <category term="dubbo" scheme="http://feijl.cn/categories/dubbo/"/>
    
    
  </entry>
  
  <entry>
    <title>maven编译错误找不到符号</title>
    <link href="http://feijl.cn/2015/10/22/maven%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF%E6%89%BE%E4%B8%8D%E5%88%B0%E7%AC%A6%E5%8F%B7/"/>
    <id>http://feijl.cn/2015/10/22/maven编译错误找不到符号/</id>
    <published>2015-10-22T03:00:00.000Z</published>
    <updated>2016-08-04T11:35:02.886Z</updated>
    
    <content type="html"><![CDATA[<p>今天从svn更新项目以后，发现一直编译不过，提示”错误: 找不到符号”</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:2.3.2:compile (default-compile) on project v1-common-util: Compilation failure: Compilation failure:</div><div class="line">[ERROR] \workspace\idea\v1_java\v1_new_site\v1_common\common_util\src\main\java\cn\v1\tech\common\util\HttpUtil.java:[80,12] 错误: 找不到符号</div><div class="line">...</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>排查过依赖包的问题，也依照网上说法利用工具clean和mvn clean都无效，经过几番尝试，最后发现跟编码有关，通过配置插件解决</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">source</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">target</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天从svn更新项目以后，发现一直编译不过，提示”错误: 找不到符号”&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:2.3.2:compile (default-compile) on project v1-common-util: Compilation failure: Compilation failure:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[ERROR] \workspace\idea\v1_java\v1_new_site\v1_common\common_util\src\main\java\cn\v1\tech\common\util\HttpUtil.java:[80,12] 错误: 找不到符号&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="maven" scheme="http://feijl.cn/categories/maven/"/>
    
    
  </entry>
  
  <entry>
    <title>springmvc4返回json数据的配置</title>
    <link href="http://feijl.cn/2015/09/20/springmvc4%E8%BF%94%E5%9B%9Ejson%E6%95%B0%E6%8D%AE%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
    <id>http://feijl.cn/2015/09/20/springmvc4返回json数据的配置/</id>
    <published>2015-09-20T04:00:00.000Z</published>
    <updated>2016-08-04T11:35:02.887Z</updated>
    
    <content type="html"><![CDATA[<p>升级到springmvc4后，发现照3.x的配置方式会报</p>
<p><code>Java.lang.NoClassDefFoundError: com/fasterxml/jackson/core/JsonProcessingException</code></p>
<p>需要更换依赖包</p>
<a id="more"></a>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>
<p>dispatcherServlet.xml配置</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"stringConverter"</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"supportedMediaTypes"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/plain;charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jsonConverter"</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageConverters"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"stringConverter"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"jsonConverter"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>由于默认使用jackson，也可以省略上面相关bean配置，在controller中需要返回json数据的方法上加上@ResponseBody注解就可以了</p>
<p>顺便提一下，3.x可以使用fastjson包，springmvc4中没有找到相应使用方式，贴一下3.x的配置</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"fastJsonHttpMessageConverter"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"supportedMediaTypes"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/html;charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/json;charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;升级到springmvc4后，发现照3.x的配置方式会报&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Java.lang.NoClassDefFoundError: com/fasterxml/jackson/core/JsonProcessingException&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;需要更换依赖包&lt;/p&gt;
    
    </summary>
    
      <category term="springmvc" scheme="http://feijl.cn/categories/springmvc/"/>
    
    
  </entry>
  
  <entry>
    <title>maven常用配置</title>
    <link href="http://feijl.cn/2015/06/28/maven%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
    <id>http://feijl.cn/2015/06/28/maven常用配置/</id>
    <published>2015-06-28T04:00:00.000Z</published>
    <updated>2016-08-04T11:35:02.886Z</updated>
    
    <content type="html"><![CDATA[<p>配置属性</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">project.build.sourceJDK</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">project.build.sourceJDK</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>依赖管理</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        ...</div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></div></pre></td></tr></table></figure>
<p>构建</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.dtd<span class="tag">&lt;/<span class="name">include</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;maven.compiler.plugin&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;project.build.sourceJDK&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;project.build.sourceJDK&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>$&#123;project.build.sourceEncoding&#125;<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;配置属性&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;properties&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;project.build.sourceJDK&lt;/span&gt;&amp;gt;&lt;/span&gt;1.7&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;project.build.sourceJDK&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;project.build.sourceEncoding&lt;/span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;project.build.sourceEncoding&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;properties&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="maven" scheme="http://feijl.cn/categories/maven/"/>
    
    
  </entry>
  
  <entry>
    <title>jsp常用标签</title>
    <link href="http://feijl.cn/2015/06/04/jsp%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/"/>
    <id>http://feijl.cn/2015/06/04/jsp常用标签/</id>
    <published>2015-06-04T07:05:03.000Z</published>
    <updated>2016-08-04T11:35:02.886Z</updated>
    
    <content type="html"><![CDATA[<h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p>c标签引入</p>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> prefix=<span class="string">"c"</span> %&gt;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>静态include</p>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;%@ include file=<span class="string">"page.jsp"</span> %&gt;</div></pre></td></tr></table></figure>
<h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><p>forEach</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;c:forEach items="$&#123;list&#125;" var="v" varStatus="status"&gt;</div><div class="line">    ...</div><div class="line">&lt;/c:forEach&gt;</div></pre></td></tr></table></figure>
<p>switch</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;c:choose&gt;</div><div class="line">    &lt;c:when test="$&#123;result == 1&#125;"&gt;</div><div class="line">        ...</div><div class="line">    &lt;/c:when&gt;</div><div class="line">    &lt;c:otherwise&gt;</div><div class="line">        ...</div><div class="line">    &lt;/c:otherwise&gt;</div><div class="line">&lt;/c:choose&gt;</div></pre></td></tr></table></figure>
<p>设置变量</p>
<figure class="highlight jsp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;c:set var=<span class="string">"str"</span> value=<span class="string">"abc"</span> scope=<span class="string">"request"</span>/&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;标签&quot;&gt;&lt;a href=&quot;#标签&quot; class=&quot;headerlink&quot; title=&quot;标签&quot;&gt;&lt;/a&gt;标签&lt;/h3&gt;&lt;p&gt;c标签引入&lt;/p&gt;
&lt;figure class=&quot;highlight jsp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;%@ taglib uri=&lt;span class=&quot;string&quot;&gt;&quot;http://java.sun.com/jsp/jstl/core&quot;&lt;/span&gt; prefix=&lt;span class=&quot;string&quot;&gt;&quot;c&quot;&lt;/span&gt; %&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="jsp" scheme="http://feijl.cn/categories/jsp/"/>
    
    
  </entry>
  
  <entry>
    <title>免费博客搭建过程分享（二）</title>
    <link href="http://feijl.cn/2015/06/03/%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E5%88%86%E4%BA%AB%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://feijl.cn/2015/06/03/免费博客搭建过程分享（二）/</id>
    <published>2015-06-03T08:25:00.000Z</published>
    <updated>2016-08-04T11:35:02.887Z</updated>
    
    <content type="html"><![CDATA[<p>为了防止换电脑或本地文件丢失，比如白天使用公司电脑，下班后回到家里想接着写，家里电脑上没有博客文件，这样需要同步的情况可以利用github版本分支进行备份，以便于更换环境后同步博客源文件，操作步骤：</p>
<ol>
<li>github上新建仓库，名称：用户名.github.io；</li>
<li>在该仓库下新建一个分支，作为备份工程，名称随意，比如：hexo；</li>
<li>设置hexo为默认分支</li>
<li>在本地目录下执行命令 <code>git clone https://github.com/用户名/用户名.github.io.git</code></li>
</ol>
<a id="more"></a>
<p>如果第一次新建博客，直接把执行hexo init命令初始化后生成的文件拷贝到该目录下即可，如果是同步github上之前的文件，切忌不用再执行hexo init，否则会重新初始化覆盖旧文件，并且丢失git关联。</p>
<p>安装hexo依赖和部署的插件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install</div><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>如果本地还没有hexo环境，依旧需要先安装nodejs和hexo，步骤参考上一篇文章</p>
<p>修改根目录下_config.yml文件中的deploy参数，改为master。这样以后博客发布是到master下，而源文件默认提交到hexo分支</p>
<p>可以继续愉快的写文章了</p>
<p>完成之后依旧执行 <code>hexo g -d</code> 生成博客文件发布到github上。</p>
<p>end.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了防止换电脑或本地文件丢失，比如白天使用公司电脑，下班后回到家里想接着写，家里电脑上没有博客文件，这样需要同步的情况可以利用github版本分支进行备份，以便于更换环境后同步博客源文件，操作步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;github上新建仓库，名称：用户名.github.io；&lt;/li&gt;
&lt;li&gt;在该仓库下新建一个分支，作为备份工程，名称随意，比如：hexo；&lt;/li&gt;
&lt;li&gt;设置hexo为默认分支&lt;/li&gt;
&lt;li&gt;在本地目录下执行命令 &lt;code&gt;git clone https://github.com/用户名/用户名.github.io.git&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="其它" scheme="http://feijl.cn/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="hexo" scheme="http://feijl.cn/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>免费博客搭建过程分享（一）</title>
    <link href="http://feijl.cn/2015/06/03/%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E5%88%86%E4%BA%AB%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://feijl.cn/2015/06/03/免费博客搭建过程分享（一）/</id>
    <published>2015-06-03T08:24:51.000Z</published>
    <updated>2016-08-04T11:35:02.887Z</updated>
    
    <content type="html"><![CDATA[<p>博客搭建过程搜索资料时发现很多没有基础知识或者技术概念的小白，出于写文章记录的目的，建站进展很缓慢，虽然我也是只菜鸟，但本着分享的精神，顺带总结下个人建站过程中的经验，简单的说，建立个人网站，就是把自己写的文章内容，以网页形式展现，放到网络上供其他人（通过ip或域名）来访问，主要由以下几点构成：</p>
<ul>
<li>搭建本地环境</li>
<li>编写文章</li>
<li>上传到网络空间</li>
<li>通过域名访问</li>
</ul>
<a id="more"></a>
<h2 id="搭建本地环境"><a href="#搭建本地环境" class="headerlink" title="搭建本地环境"></a>搭建本地环境</h2><p>普通情况下，我们只需要使用记事本之类的文本编辑器便可随意撰写文章，但通常网页内容组成不仅仅只是纯文字，而是通过html、css、js等编程语言编写浏览器来解析显示。对不懂编程语言的人来说，目的只是想简单的写写文章然后发布，这里需要使用一些技术框架来实现这个过程，利用框架生成网页，让我们只需要关注文章内容本身。</p>
<h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><blockquote>
<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
</blockquote>
<p>为什么选择hexo另一方面也是为了配合后面用到的网络空间（github），而hexo需要依赖于nodejs环境运行，所以接下来进行：</p>
<p>第一步，安装nodejs。点击链接：<a href="https://nodejs.org" target="_blank" rel="external">https://nodejs.org</a> 进入nodejs官网，在首页直接点击download，下载完成后进行安装</p>
<p>第二步，安装hexo。打开命令行，执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo</div></pre></td></tr></table></figure>
<p><strong>说明</strong>：windows系统下点击开始-运行(win+R键)，输入cmd，按回车键启动命令行。</p>
<p>第三步，生成博客文件。随意选择目录下新建一个文件夹，作为本次搭建博客的工作目录（以后写文章时也在该目录下），切换到该目录。然后执行以下命令生成项目文件。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo init</div><div class="line">npm install</div></pre></td></tr></table></figure>
<p><strong>说明</strong>：windows系统在命令行输入<code>cd 目录名</code>命令切换到相应目录。</p>
<p>第四步，查看效果。执行命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo s</div></pre></td></tr></table></figure>
<p>看到命令行窗口显示</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</div></pre></td></tr></table></figure>
<p>代表启动成功。打开浏览器访问：<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> ,可以看到hexo搭建起来的博客效果，页面样式不满意的后面可以更换主题。</p>
<p>这里Hexo已自动生成了第一篇叫hello world的文章。接下来，我们就可以开始写自己的文章了</p>
<h2 id="编写文章"><a href="#编写文章" class="headerlink" title="编写文章"></a>编写文章</h2><p>使用hexo默认方式新建文章，以后可以直接用工具新建或拷贝现有的文件修改，执行命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new [layout] <span class="string">"文章的名字"</span></div></pre></td></tr></table></figure>
<p>[layout] 代表是可选的参数，可以理解为模版，不输入该参数时默认是使用“博客所在目录\scaffolds\post.md”作为模版，scaffolds目录下还有其它layout，也可以自己添加，这里先不输入。</p>
<p>刚才的命令执行后，文件生成在“博客所在目录\source_posts\文章的名字.md”，打开该文件中发现上面有这样的内容：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">title: 文章的名字</div><div class="line">date: 2015-06-01 17:53:47</div><div class="line">tags:</div><div class="line">---</div></pre></td></tr></table></figure>
<p>生成的文件上面内容和“博客所在目录\scaffolds\post.md”文件中内容一样，这里使用的格式暂时可以不用关注，只需要知道title=标题，date=时间，tags=标签</p>
<h3 id="分类模版-可选"><a href="#分类模版-可选" class="headerlink" title="分类模版[可选]"></a>分类模版[可选]</h3><p>可以修改post.md文件，以后再执行“hexo new ”写新文章时，生成的文件中自带修改后的模版内容了，例如在该模版文件中增加category参数</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">title: &#123;&#123; title &#125;&#125;</div><div class="line">date: &#123;&#123; date &#125;&#125;</div><div class="line">category: 其它</div><div class="line">tags: </div><div class="line">---</div></pre></td></tr></table></figure>
<p>以后new文章时就有了category分类选项。而这里---以下的，就是自己真正需要编写的文章内容了，使用Markdown语法进行编写，更美观和规范，排版效果更佳。</p>
<h3 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h3><blockquote>
<p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过类似html的标记语法，但比html更容易、简洁、高效的语法，简单的编写就能使普通文本内容具有一定的样式排版</p>
</blockquote>
<p>点击链接：<a href="http://wowubuntu.com/markdown" target="_blank" rel="external">http://wowubuntu.com/markdown</a> 查看Markdown语法说明</p>
<p>例如这是编写的内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">### 这是一个测试标题</div><div class="line"></div><div class="line">1. 这是列表内容1</div><div class="line"></div><div class="line">2. 这里列表内容2</div><div class="line"></div><div class="line">&gt; 这是引用内容</div><div class="line"></div><div class="line">[这是一个链接](http://localhost:4000)</div><div class="line"></div><div class="line">这是代码 `hello world`</div></pre></td></tr></table></figure>
<p>出来的效果是这样的：</p>
<h3 id="这是一个测试标题"><a href="#这是一个测试标题" class="headerlink" title="这是一个测试标题"></a>这是一个测试标题</h3><ol>
<li><p>这是列表内容1</p>
</li>
<li><p>这里列表内容2</p>
</li>
</ol>
<blockquote>
<p>这是引用内容</p>
</blockquote>
<p><a href="http://localhost:4000" target="_blank" rel="external">这是一个链接</a></p>
<p>这是代码 <code>hello world</code></p>
<p>编写完成后不需要重启服务，直接刷新浏览器页面就可查看生成效果。</p>
<p>很多编辑器本身也自带简单的预览功能，比如：<a href="http://markdownpad.com" target="_blank" rel="external">markdownpad</a>。</p>
<p>好了，现在你可以尽情的开始写博客文章了！</p>
<h2 id="上传到网络空间"><a href="#上传到网络空间" class="headerlink" title="上传到网络空间"></a>上传到网络空间</h2><p>写完之后的所有文件是存在本地电脑中的，也只能在本机访问，一般网站是要购买服务器、数据库等，把网站程序部署到服务器上通过外网来访问，但这里我们通过hexo生成的只是简单的静态文件，也可以不购买空间而借用其它现有的第三方服务来达到目的</p>
<h3 id="github-gitcafe"><a href="#github-gitcafe" class="headerlink" title="github/gitcafe"></a>github/gitcafe</h3><p><a href="https://github.com" target="_blank" rel="external">github</a> 是一个全球知名的代码托管平台，<a href="https://gitcafe.com" target="_blank" rel="external">gitcafe</a> 跟github类似，可以理解为国内参照版。他们本身都只是提供代码托管，但是同时他们又都提供了pages免费空间，本意是为展示项目作用，但很多人（比如我）把它当作个人博客使用。这里我使用的是gitcafe，因为gitcafe在国内访问更快，接下来</p>
<h4 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h4><p>以gitcafe为例：登录后，在“操控中心”的左侧栏“我的项目”列表中，点击“创建”按钮，进入创建新项目页面，输入项目名称、项目描述及主页等字段，默认是“公开项目”，按创建完成项目创建过程。</p>
<h4 id="安装和设置git"><a href="#安装和设置git" class="headerlink" title="安装和设置git"></a>安装和设置git</h4><p>github和gitcafe都需要使用git工具进行文件的同步，安装和设置可以参考gitcafe的教程：<a href="https://gitcafe.com/GitCafe/Help/wiki/如何安装和设置-Git#wiki" target="_blank" rel="external">https://gitcafe.com/GitCafe/Help/wiki/如何安装和设置-Git#wiki</a></p>
<h4 id="发布到git"><a href="#发布到git" class="headerlink" title="发布到git"></a>发布到git</h4><p>git工具安装和配置完成之后，编辑博客所在根目录下的_config.yml文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repository: git@gitcafe.com:feijl/feijl.git</div><div class="line">  branch: gitcafe-pages</div></pre></td></tr></table></figure>
<p>把“git@gitcafe.com:feijl/feijl.git”替换成你的git地址，然后使用git工具执行命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo d</div></pre></td></tr></table></figure>
<p>这样就生成静态网页文件并发布到gitcafe上了。或者两条语句也可以组合成一条：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo g <span class="_">-d</span></div></pre></td></tr></table></figure>
<p>上传完成过一会儿生效之后，使用浏览器访问 <a href="http://用户名.gitcafe.io" target="_blank" rel="external">http://用户名.gitcafe.io</a> 就可以看到效果</p>
<p>好了，现在已经可以让其他人访问你的博客了！</p>
<h2 id="通过自己域名访问"><a href="#通过自己域名访问" class="headerlink" title="通过自己域名访问"></a>通过自己域名访问</h2><h3 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h3><p>收费的有：国外godaddy，官网地址：<a href="https://www.godaddy.com" target="_blank" rel="external">https://www.godaddy.com</a>，或者国内也有很多域名提供商(例如万网)，只是可能会需要进行实名认证、备案等操作流程。</p>
<p>免费的有：待补充</p>
<h3 id="配置dns解析"><a href="#配置dns解析" class="headerlink" title="配置dns解析"></a>配置dns解析</h3><p>域名需要解析到具体的服务器地址才能访问，比如我们需要通过域名访问到gitcafe上的主页（“<a href="http://用户名.gitcafe.io”的实际地址）。" target="_blank" rel="external">http://用户名.gitcafe.io”的实际地址）。</a></p>
<p>国内dns解析服务推荐：<a href="https://www.dnspod.cn" target="_blank" rel="external">https://www.dnspod.cn</a></p>
<h3 id="配置域名"><a href="#配置域名" class="headerlink" title="配置域名"></a>配置域名</h3><p>github：在项目根目录新建一个CNAME文件，内容写上自己购买的域名，比如：feijl.com</p>
<p>gitcafe：在gitcafe项目管理，选择”项目设置”-“pages服务”，添加自己购买的域名</p>
<p>打开浏览器访问自己的域名查看效果</p>
<p>已经可以让其他人通过域名访问了！</p>
<h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>hexo有很多主题模版，如果想设置主页样式，可以通过更改、修改主题来达到自己想要的效果，执行命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> 主题地址</div></pre></td></tr></table></figure>
<p>hexo官方收录的主题：<a href="https://hexo.io/themes/" target="_blank" rel="external">https://hexo.io/themes/</a></p>
<p>也可以在这里找：<a href="https://github.com/hexojs/hexo/wiki/themes" target="_blank" rel="external">https://github.com/hexojs/hexo/wiki/themes</a></p>
<p>或者知乎上这篇：<a href="http://www.zhihu.com/question/24422335" target="_blank" rel="external">http://www.zhihu.com/question/24422335</a></p>
<p>例如我选择的是next主题</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure>
<p>下载完成之后修改主页目录下_config.yml文件，找到</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theme: landscape</div></pre></td></tr></table></figure>
<p>把默认主题landscape修改成新主题名称</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theme: next</div></pre></td></tr></table></figure>
<p>同样，执行命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo s</div></pre></td></tr></table></figure>
<p>启动服务，打开浏览器访问 <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 查看效果</p>
<p>满意后依然通过hexo命令发布到gitcafe</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo g <span class="_">-d</span></div></pre></td></tr></table></figure>
<p>end.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;博客搭建过程搜索资料时发现很多没有基础知识或者技术概念的小白，出于写文章记录的目的，建站进展很缓慢，虽然我也是只菜鸟，但本着分享的精神，顺带总结下个人建站过程中的经验，简单的说，建立个人网站，就是把自己写的文章内容，以网页形式展现，放到网络上供其他人（通过ip或域名）来访问，主要由以下几点构成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;搭建本地环境&lt;/li&gt;
&lt;li&gt;编写文章&lt;/li&gt;
&lt;li&gt;上传到网络空间&lt;/li&gt;
&lt;li&gt;通过域名访问&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="其它" scheme="http://feijl.cn/categories/%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="hexo" scheme="http://feijl.cn/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://feijl.cn/2015/05/20/hello-world/"/>
    <id>http://feijl.cn/2015/05/20/hello-world/</id>
    <published>2015-05-20T04:00:00.000Z</published>
    <updated>2016-08-04T11:35:02.884Z</updated>
    
    <content type="html"><![CDATA[<p>第一篇，程序猿都懂得。:)<br>:smile:</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一篇，程序猿都懂得。:)&lt;br&gt;:smile:&lt;/p&gt;

    
    </summary>
    
      <category term="其它" scheme="http://feijl.cn/categories/%E5%85%B6%E5%AE%83/"/>
    
    
  </entry>
  
</feed>
